"I also dream about a modern replacement for LaTeX designed from the ground up
 to target multiple output formats (at least PDF, HTML, EPUB)"

	-- John MacFarlane, author of Pandoc

Proposal
--------------------------------------------------------------------------------

A markup language to produce PDF, HTML, EPUB documents

- TeX like syntax, but vastly simpler parsing rules, and escaping.
- HTML, RST, LaTeX like semantics, i.e section, h1, strong, footnote

Design Goals:

- No Ascii Art. All commands follow same form
- Commands can take arguments, including text and lists of items.
- Commands can be used to describe formatting, structure, and metadata.
- Commands will not require exact indentation, trailing whitespace
  or drawing ascii art.
- Extending the language can be done through filters, programs that
  read and produce an abstract syntax tree.
	
Non Goals:

- Shorthand will not be defined in the core language, but can be 
  added by filters.

- Programmable. The Language will be declarative, without macros.
  Can be added by filters.

Syntax
--------------------------------------------------------------------------------

Rule 0: \ is the command/escape character.
	 \\ is a literal \, simarly for \, \{ \} \[ \] \! \: \; 

Rule 1: One line break is a space.
	Two line breaks are the end of a paragraph.

Rule 2: Commands begin with a \ have a name, arguments
	and end with whitespace, or a semicolon.

	i.e foo \bar baz
	    foo \bar; baz
	
	Commands can have any number of arguments.
	Command names must not contain whitespace, or control characters
	Names must not contain the puncutation marks : \ { } [ ] ! : ;

Rule 3: Text Arguments
	Text arguments are delimited by {}'s, or {{{,}}}

	e.g \foo{bar}{baz}
	    \lol{{{a thing}}}
	    \section{\h1{blah}}

	Commands can take multiple text arguments. 
	Commands can also be inside text arguments. 

Rule 4: Raw Text Arguments
	If the first character is a !, the text 
	inside is treated as a raw string.
	
	e.g \foo{{{!bar}}}, \foo{!bar}

	Commands can take multiple raw text arguments
	Raw Text arguments cannot contain commands.
	Newlines are preserved. Backslashes are preserved.

Rule 5: List Arguments
	A command can take a list as an argument
	items are comma seperated. 

	e.g \foo[1,2,3] \bar[1]
	
	Lists can contain other lists, and text blocks

	e.g \foo[[1],[2]], \bar[{1,2}]

	List items can have names attached. Names follow 
	the same restriction as command names.
	
	e.g \foo[a=1, b=2]
	
	There is no way to escape = or , except through a text block.
	Trailing commas are allowed, and ignored.


Rule 6: Raw indented text argument
	If a command has :: at the end, the next consistently
	indented block of text, is used as a raw text argument

	e.g:
		\raw::
			text block
		text.

	Indentation must be consistent, blank lines are skipped
	when checking indentation levels.

	Newlines, backslashes are preserved. No commands parsed inside.

Bikeshedding:

	Do we need non raw indented blocks? The only point to indent
	is to avoid having to escape specific things.


Semantics
--------------------------------------------------------------------------------

Standard HTML style elements, with a smattering of LaTeX, and ReStructuredText
	
	\code[python]{}, \h[1], \b, \i{...}, \pagebreak
	\note, \footnote, \sidenote, \ref, \link,
	\author, \title, \version, \list, \table, \raw


Implementation
--------------------------------------------------------------------------------






